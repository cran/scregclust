// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppEigen.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// allocate_into_modules
Rcpp::IntegerVector allocate_into_modules(SEXP resid_array, Eigen::Map<Eigen::MatrixXd> resid_var, Rcpp::List prior_indicator, Rcpp::IntegerVector k_, Rcpp::IntegerVector update_order, double prior_baseline, double prior_weight);
RcppExport SEXP _scregclust_allocate_into_modules(SEXP resid_arraySEXP, SEXP resid_varSEXP, SEXP prior_indicatorSEXP, SEXP k_SEXP, SEXP update_orderSEXP, SEXP prior_baselineSEXP, SEXP prior_weightSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type resid_array(resid_arraySEXP);
    Rcpp::traits::input_parameter< Eigen::Map<Eigen::MatrixXd> >::type resid_var(resid_varSEXP);
    Rcpp::traits::input_parameter< Rcpp::List >::type prior_indicator(prior_indicatorSEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type k_(k_SEXP);
    Rcpp::traits::input_parameter< Rcpp::IntegerVector >::type update_order(update_orderSEXP);
    Rcpp::traits::input_parameter< double >::type prior_baseline(prior_baselineSEXP);
    Rcpp::traits::input_parameter< double >::type prior_weight(prior_weightSEXP);
    rcpp_result_gen = Rcpp::wrap(allocate_into_modules(resid_array, resid_var, prior_indicator, k_, update_order, prior_baseline, prior_weight));
    return rcpp_result_gen;
END_RCPP
}
// jaccard_indicator_comp
Rcpp::List jaccard_indicator_comp(Rcpp::List gs, double eps);
RcppExport SEXP _scregclust_jaccard_indicator_comp(SEXP gsSEXP, SEXP epsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type gs(gsSEXP);
    Rcpp::traits::input_parameter< double >::type eps(epsSEXP);
    rcpp_result_gen = Rcpp::wrap(jaccard_indicator_comp(gs, eps));
    return rcpp_result_gen;
END_RCPP
}
// coop_lasso
Rcpp::List coop_lasso(Eigen::Map<Eigen::MatrixXd> y, Eigen::Map<Eigen::MatrixXd> x, double lambda, Eigen::Map<Eigen::ArrayXd> weights, Rcpp::Nullable<Rcpp::NumericMatrix> beta_0, double rho_0, double alpha_0, int n_update, double eps_corr, int max_iter, double eps_rel, double eps_abs, bool verbose);
RcppExport SEXP _scregclust_coop_lasso(SEXP ySEXP, SEXP xSEXP, SEXP lambdaSEXP, SEXP weightsSEXP, SEXP beta_0SEXP, SEXP rho_0SEXP, SEXP alpha_0SEXP, SEXP n_updateSEXP, SEXP eps_corrSEXP, SEXP max_iterSEXP, SEXP eps_relSEXP, SEXP eps_absSEXP, SEXP verboseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::Map<Eigen::MatrixXd> >::type y(ySEXP);
    Rcpp::traits::input_parameter< Eigen::Map<Eigen::MatrixXd> >::type x(xSEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< Eigen::Map<Eigen::ArrayXd> >::type weights(weightsSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<Rcpp::NumericMatrix> >::type beta_0(beta_0SEXP);
    Rcpp::traits::input_parameter< double >::type rho_0(rho_0SEXP);
    Rcpp::traits::input_parameter< double >::type alpha_0(alpha_0SEXP);
    Rcpp::traits::input_parameter< int >::type n_update(n_updateSEXP);
    Rcpp::traits::input_parameter< double >::type eps_corr(eps_corrSEXP);
    Rcpp::traits::input_parameter< int >::type max_iter(max_iterSEXP);
    Rcpp::traits::input_parameter< double >::type eps_rel(eps_relSEXP);
    Rcpp::traits::input_parameter< double >::type eps_abs(eps_absSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    rcpp_result_gen = Rcpp::wrap(coop_lasso(y, x, lambda, weights, beta_0, rho_0, alpha_0, n_update, eps_corr, max_iter, eps_rel, eps_abs, verbose));
    return rcpp_result_gen;
END_RCPP
}
// coef_nnls
Rcpp::List coef_nnls(Eigen::Map<Eigen::MatrixXd> x, Eigen::Map<Eigen::MatrixXd> y, double eps, int max_iter);
RcppExport SEXP _scregclust_coef_nnls(SEXP xSEXP, SEXP ySEXP, SEXP epsSEXP, SEXP max_iterSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::Map<Eigen::MatrixXd> >::type x(xSEXP);
    Rcpp::traits::input_parameter< Eigen::Map<Eigen::MatrixXd> >::type y(ySEXP);
    Rcpp::traits::input_parameter< double >::type eps(epsSEXP);
    Rcpp::traits::input_parameter< int >::type max_iter(max_iterSEXP);
    rcpp_result_gen = Rcpp::wrap(coef_nnls(x, y, eps, max_iter));
    return rcpp_result_gen;
END_RCPP
}
// alloc_array
SEXP alloc_array(SEXP input, R_xlen_t n_cl);
RcppExport SEXP _scregclust_alloc_array(SEXP inputSEXP, SEXP n_clSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type input(inputSEXP);
    Rcpp::traits::input_parameter< R_xlen_t >::type n_cl(n_clSEXP);
    rcpp_result_gen = Rcpp::wrap(alloc_array(input, n_cl));
    return rcpp_result_gen;
END_RCPP
}
// reset_array
void reset_array(SEXP arr, SEXP input);
RcppExport SEXP _scregclust_reset_array(SEXP arrSEXP, SEXP inputSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type arr(arrSEXP);
    Rcpp::traits::input_parameter< SEXP >::type input(inputSEXP);
    reset_array(arr, input);
    return R_NilValue;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_scregclust_allocate_into_modules", (DL_FUNC) &_scregclust_allocate_into_modules, 7},
    {"_scregclust_jaccard_indicator_comp", (DL_FUNC) &_scregclust_jaccard_indicator_comp, 2},
    {"_scregclust_coop_lasso", (DL_FUNC) &_scregclust_coop_lasso, 13},
    {"_scregclust_coef_nnls", (DL_FUNC) &_scregclust_coef_nnls, 4},
    {"_scregclust_alloc_array", (DL_FUNC) &_scregclust_alloc_array, 2},
    {"_scregclust_reset_array", (DL_FUNC) &_scregclust_reset_array, 2},
    {NULL, NULL, 0}
};

RcppExport void R_init_scregclust(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
